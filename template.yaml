AWSTemplateFormatVersion: '2010-09-09'
Description: Family Reunion Website Infrastructure
Parameters:
  DomainName:
    Type: String
    Description: Domain name for the website (optional)
    Default: wadsworth-reunion-stack
  AcmCertificateArn:
    Type: String
    Description: ARN for AWS Certificate
Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: DomainName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  RSVPFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${DomainName}-rsvp
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: rsvp-function.zip
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          RSVP_TABLE_NAME:
            Ref: RSVPTable

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningProtocol: sigv4
        SigningBehavior: always

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - wadsworthreunion.com
          - www.wadsworthreunion.com
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        DefaultCacheBehavior:  # For non-www domain
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        # Add new CacheBehavior for www subdomain
        CacheBehaviors:
          - PathPattern: '*'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            DefaultTTL: 86400
            MaxTTL: 31536000
            MinTTL: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref RedirectFunctionVersion

  # Add a Lambda@Edge function for the redirect
  RedirectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-redirect
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const request = event.Records[0].cf.request;
            const headers = request.headers;
            const host = headers.host[0].value;
            
            if (host.startsWith('www.')) {
              const response = {
                status: '301',
                statusDescription: 'Moved Permanently',
                headers: {
                  'location': [{
                    key: 'Location',
                    value: `https://wadsworthreunion.com${request.uri}`
                  }],
                  'cache-control': [{
                    key: 'Cache-Control',
                    value: 'max-age=3600'
                  }]
                }
              };
              return response;
            }
            return request;
          }
      Handler: index.handler
      Role: !GetAtt LambdaEdgeRole.Arn
      Runtime: nodejs18.x
      Timeout: 5
      MemorySize: 128

  RedirectFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref RedirectFunction
      Description: 'Version for CloudFront Lambda@Edge'

  # Add IAM role for Lambda@Edge
  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  RSVPTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:
          Fn::Sub: ${DomainName}-rsvp
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: submissionDate
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
          - AttributeName: submissionDate
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: SubmissionDateIndex
            KeySchema:
              - AttributeName: submissionDate
                KeyType: HASH
            Projection:
              ProjectionType: ALL
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt RSVPTable.Arn
                  - !Sub "${RSVPTable.Arn}/index/*"

  RSVPFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${DomainName}-rsvp
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: rsvp-function.zip
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          RSVP_TABLE_NAME:
            Ref: RSVPTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          DEBUG: "*"

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${DomainName}-api
      EndpointConfiguration:
        Types:
        - REGIONAL

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: rsvp
      RestApiId:
        Ref: ApiGateway

  ApiCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'https://wadsworthreunion.com'"
            ResponseTemplates:
              application/json: "{}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      ResourceId:
        Ref: ApiResource
      RestApiId:
        Ref: ApiGateway
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RSVPFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId:
        Ref: ApiResource
      RestApiId:
        Ref: ApiGateway
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - ApiMethod
    Properties:
      RestApiId:
        Ref: ApiGateway
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      RestApiId:
        Ref: ApiGateway
      StageName: prod
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RSVPFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/rsvp
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildBasePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${PipelineArtifactsBucket}
                  - !Sub arn:aws:s3:::${PipelineArtifactsBucket}/*
                  - !Sub arn:aws:s3:::${DomainName}
                  - !Sub arn:aws:s3:::${DomainName}/*
                  - !Sub arn:aws:s3:::${LambdaCodeBucket}
                  - !Sub arn:aws:s3:::${LambdaCodeBucket}/*
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:GetBucketLocation
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
              - Effect: Allow
                Action:
                  - apigateway:POST
                  - apigateway:GET
                Resource: 
                  - !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/*'
                  - !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/deployments'
                  - !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/*'
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - s3:*
                  - lambda:*
                  - dynamodb:*
                  - apigateway:*
                  - cloudfront:*
                  - iam:*
                  - codebuild:*
                  - codepipeline:*
                  - codestar-connections:*
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CodePipelineBasePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            - iam:PassRole
          - Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${PipelineArtifactsBucket}/*
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:PutObject
          - Effect: Allow
            Resource:
              Fn::GetAtt:
              - CodeBuildProject
              - Arn
            Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
          - Effect: Allow
            Resource:
              Ref: GitHubConnection
            Action:
            - codestar-connections:UseConnection
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-build
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_LAMBDA_CONTAINER
        ComputeType: BUILD_LAMBDA_1GB
        Image: aws/codebuild/amazonlinux-x86_64-lambda-standard:nodejs18
        EnvironmentVariables:
          - Name: WEBSITE_BUCKET
            Value: !Ref DomainName
          - Name: CLOUDFRONT_ID
            Value: !Ref CloudFrontDistribution
          - Name: LAMBDA_CODE_BUCKET
            Value: !Ref LambdaCodeBucket
          - Name: API_ID
            Value: !Ref ApiGateway
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 18
              commands:
                - cd lambda/rsvp-function
                - npm install
                - cd ../..
            build:
              commands:
                # Package Lambda function
                - cd lambda/rsvp-function
                - zip -r ../../rsvp-function.zip index.js node_modules/
                - cd ../..
                # Upload Lambda package to S3
                - aws s3 cp rsvp-function.zip s3://${LAMBDA_CODE_BUCKET}/rsvp-function.zip
                # Build and deploy website
                - aws s3 sync . s3://${WEBSITE_BUCKET} --exclude "*" --include "*.html" --include "*.css" --include "*.js" --include "*.jpg" --include "*.png" --include "*.ico"
                - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"
                - aws apigateway create-deployment --rest-api-id ${API_ID} --stage-name prod
      Cache:
        Type: NO_CACHE
  GitHubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName:
        Fn::Sub: ${AWS::StackName}-github
      ProviderType: GitHub
  Pipeline:
      Type: AWS::CodePipeline::Pipeline
      Properties:
        RoleArn:
          Fn::GetAtt:
          - CodePipelineServiceRole
          - Arn
        ArtifactStore:
          Type: S3
          Location:
            Ref: PipelineArtifactsBucket
        Stages:
        - Name: Source
          Actions:
          - Name: Source
            ActionTypeId:
              Category: Source
              Owner: AWS
              Version: 1
              Provider: CodeStarSourceConnection
            Configuration:
              ConnectionArn:
                Ref: GitHubConnection
              FullRepositoryId: tannerk2/family-reunion-website
              BranchName: main
            OutputArtifacts:
            - Name: SourceCode
            RunOrder: 1
        - Name: UpdateInfrastructure
          Actions:
          - Name: UpdateCloudFormation
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            Configuration:
              ActionMode: CREATE_UPDATE
              Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
              RoleArn: !GetAtt CloudFormationExecutionRole.Arn
              StackName: !Ref AWS::StackName
              TemplatePath: SourceCode::template.yaml
              ParameterOverrides: !Sub |
                {
                  "DomainName": "${DomainName}",
                  "AcmCertificateArn": "${AcmCertificateArn}"
                }
            InputArtifacts:
            - Name: SourceCode
            RunOrder: 1
        - Name: Deploy
          Actions:
          - Name: DeployWebsite
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName:
                Ref: CodeBuildProject
              EnvironmentVariables:
                Fn::Sub: '[{"name":"WEBSITE_BUCKET","value":"${DomainName}"},{"name":"CLOUDFRONT_ID","value":"${CloudFrontDistribution}"}]'
            InputArtifacts:
            - Name: SourceCode
            OutputArtifacts:
            - Name: BuildOutput
            RunOrder: 1
Outputs:
  WebsiteURL:
    Description: CloudFront Distribution Domain Name
    Value:
      Fn::Sub: https://${CloudFrontDistribution.DomainName}
  ApiEndpoint:
    Description: API Gateway Endpoint
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/rsvp