AWSTemplateFormatVersion: '2010-09-09'
Description: Family Reunion Website Infrastructure
Parameters:
  DomainName:
    Type: String
    Description: Domain name for the website (optional)
    Default: family-reunion-website
Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: DomainName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${WebsiteBucket.Arn}/*
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
        - DomainName:
            Fn::GetAtt:
            - WebsiteBucket
            - RegionalDomainName
          Id: S3Origin
          S3OriginConfig:
            OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
  RSVPTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${DomainName}-rsvp
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            Resource:
              Fn::GetAtt:
              - RSVPTable
              - Arn
  RSVPFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${DomainName}-rsvp
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile: "exports.handler = async (event) => {\n  // Basic error checking\n\
          \  if (!event.body) {\n    return {\n      statusCode: 400,\n      body:\
          \ JSON.stringify({ message: 'Missing request body' })\n    };\n  }\n  \n\
          \  // Implementation will go here\n  return {\n    statusCode: 200,\n  \
          \  headers: {\n      'Access-Control-Allow-Origin': '*'\n    },\n    body:\
          \ JSON.stringify({ message: 'RSVP recorded successfully' })\n  };\n};\n"
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${DomainName}-api
      EndpointConfiguration:
        Types:
        - REGIONAL
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: rsvp
      RestApiId:
        Ref: ApiGateway
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RSVPFunction.Arn}/invocations
      ResourceId:
        Ref: ApiResource
      RestApiId:
        Ref: ApiGateway
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - ApiMethod
    Properties:
      RestApiId:
        Ref: ApiGateway
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      RestApiId:
        Ref: ApiGateway
      StageName: prod
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RSVPFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/rsvp
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CodeBuildBasePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${PipelineArtifactsBucket}/*
            - Fn::Sub: arn:aws:s3:::${WebsiteBucket}/*
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:GetBucketLocation
            - s3:ListBucket
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CodePipelineBasePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
          - Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${PipelineArtifactsBucket}/*
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:PutObject
          - Effect: Allow
            Resource:
              Fn::GetAtt:
              - CodeBuildProject
              - Arn
            Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-build
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: "version: 0.2\nphases:\n  build:\n    commands:\n      - aws s3\
          \ sync . s3://${WEBSITE_BUCKET}/ --exclude \".git/*\" --exclude \"buildspec.yml\"\
          \nartifacts:\n  files:\n    - '**/*'\n"
      Cache:
        Type: NO_CACHE
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn:
        Fn::GetAtt:
        - CodePipelineServiceRole
        - Arn
      ArtifactStore:
        Type: S3
        Location:
          Ref: PipelineArtifactsBucket
      Stages:
      - Name: Source
        Actions:
        - Name: Source
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: 1
            Provider: CodeCommit
          Configuration:
            RepositoryName: family-reunion-website
            BranchName: main
          OutputArtifacts:
          - Name: SourceCode
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: Deploy
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: 1
            Provider: CodeBuild
          Configuration:
            ProjectName:
              Ref: CodeBuildProject
            EnvironmentVariables: '[{"name":"WEBSITE_BUCKET","value":"${WebsiteBucket}"}]'
          InputArtifacts:
          - Name: SourceCode
          OutputArtifacts:
          - Name: BuildOutput
          RunOrder: 1
Outputs:
  WebsiteURL:
    Description: CloudFront Distribution Domain Name
    Value:
      Fn::Sub: https://${CloudFrontDistribution.DomainName}
  ApiEndpoint:
    Description: API Gateway Endpoint
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/rsvp
