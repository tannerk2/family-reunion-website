AWSTemplateFormatVersion: '2010-09-09'
Description: Family Reunion Website Infrastructure
Parameters:
  DomainName:
    Type: String
    Description: Domain name for the website (optional)
    Default: wadsworth-reunion-stack
  AcmCertificateArn:
    Type: String
    Description: ARN for AWS Certificate
Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: DomainName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningProtocol: sigv4
        SigningBehavior: always

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - wadsworthreunion.com
          - '*.wadsworthreunion.com'
          - www.wadsworthreunion.com
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
  RSVPTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:
          Fn::Sub: ${DomainName}-rsvp
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: submissionDate
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
          - AttributeName: submissionDate
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: SubmissionDateIndex
            KeySchema:
              - AttributeName: submissionDate
                KeyType: HASH
            Projection:
              ProjectionType: ALL
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt RSVPTable.Arn
                  - !Sub "${RSVPTable.Arn}/index/*"
  RSVPFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${DomainName}-rsvp
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
          const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
          const { DynamoDBDocumentClient, PutCommand } = require('@aws-sdk/lib-dynamodb');

          const client = new DynamoDBClient({});
          const docClient = DynamoDBDocumentClient.from(client);

          exports.handler = async (event) => {
            console.log('Received event:', JSON.stringify(event, null, 2));
            
            const corsHeaders = {
              'Access-Control-Allow-Origin': 'https://wadsworthreunion.com',
              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key',
              'Access-Control-Allow-Methods': 'OPTIONS,POST'
            };

            if (event.httpMethod === 'OPTIONS') {
              return {
                statusCode: 200,
                headers: corsHeaders,
                body: ''
              };
            }

            try {
              if (!event.body) {
                return {
                  statusCode: 400,
                  headers: corsHeaders,
                  body: JSON.stringify({ message: 'Missing request body' })
                };
              }

              const rsvpData = JSON.parse(event.body);
              console.log('Parsed RSVP data:', JSON.stringify(rsvpData, null, 2));
              
              const { mainContact, guests, totalGuests } = rsvpData;

              if (!mainContact.email || !mainContact.name || !guests || guests.length === 0) {
                return {
                  statusCode: 400,
                  headers: corsHeaders,
                  body: JSON.stringify({ message: 'Missing required fields' })
                };
              }

              const isValidGuests = guests.every(guest => 
                guest.name && 
                typeof guest.age === 'string' && 
                parseInt(guest.age) >= 0 && 
                parseInt(guest.age) <= 120
              );

              if (!isValidGuests) {
                return {
                  statusCode: 400,
                  headers: corsHeaders,
                  body: JSON.stringify({ message: 'Invalid guest data' })
                };
              }

              const item = {
                email: mainContact.email,
                submissionDate: new Date().toISOString(),
                name: mainContact.name,
                totalGuests,
                guests: guests.map(guest => ({
                  name: guest.name,
                  age: parseInt(guest.age, 10)
                }))
              };

              console.log('Attempting to save item:', JSON.stringify(item, null, 2));

              try {
                const command = new PutCommand({
                  TableName: process.env.RSVP_TABLE_NAME,
                  Item: item
                });
                
                console.log('Executing PutCommand:', JSON.stringify(command.input, null, 2));
                const result = await docClient.send(command);
                console.log('PutCommand result:', JSON.stringify(result, null, 2));
              } catch (dbError) {
                console.error('DynamoDB error:', dbError);
                throw dbError;
              }

              console.log('Successfully saved item');

              return {
                statusCode: 200,
                headers: corsHeaders,
                body: JSON.stringify({
                  message: 'RSVP recorded successfully',
                  confirmationId: item.submissionDate
                })
              };
            } catch (error) {
              console.error('Error processing RSVP:', error);
              return {
                statusCode: 500,
                headers: corsHeaders,
                body: JSON.stringify({ 
                  message: 'Error processing RSVP',
                  error: error.message 
                })
              };
            }
          };
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          RSVP_TABLE_NAME:
            Ref: RSVPTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSSDKv3-Node18:10
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${DomainName}-api
      EndpointConfiguration:
        Types:
        - REGIONAL

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: rsvp
      RestApiId:
        Ref: ApiGateway

  ApiCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'https://wadsworthreunion.com'"
            ResponseTemplates:
              application/json: "{}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      ResourceId:
        Ref: ApiResource
      RestApiId:
        Ref: ApiGateway
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiMethod:
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RSVPFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId:
        Ref: ApiResource
      RestApiId:
        Ref: ApiGateway
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - ApiMethod
    Properties:
      RestApiId:
        Ref: ApiGateway
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      RestApiId:
        Ref: ApiGateway
      StageName: prod
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RSVPFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/rsvp
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CodeBuildServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
        Policies:
        - PolicyName: CodeBuildBasePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Resource: '*'
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            - Effect: Allow
              Resource:
              - Fn::Sub: arn:aws:s3:::${PipelineArtifactsBucket}
              - Fn::Sub: arn:aws:s3:::${PipelineArtifactsBucket}/*
              - Fn::Sub: arn:aws:s3:::${DomainName}
              - Fn::Sub: arn:aws:s3:::${DomainName}/*
              Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:ListBucket
              - s3:DeleteObject
              - s3:GetBucketLocation
              - s3:ListBucket
            - Effect: Allow
              Action:
              - cloudfront:CreateInvalidation
              Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - s3:*
                  - lambda:*
                  - dynamodb:*
                  - apigateway:*
                  - cloudfront:*
                  - iam:*
                  - codebuild:*
                  - codepipeline:*
                  - codestar-connections:*
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CodePipelineBasePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            - iam:PassRole
          - Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${PipelineArtifactsBucket}/*
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:PutObject
          - Effect: Allow
            Resource:
              Fn::GetAtt:
              - CodeBuildProject
              - Arn
            Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
          - Effect: Allow
            Resource:
              Ref: GitHubConnection
            Action:
            - codestar-connections:UseConnection
  CodeBuildProject:
      Type: AWS::CodeBuild::Project
      Properties:
        Name:
          Fn::Sub: ${AWS::StackName}-build
        ServiceRole:
          Fn::GetAtt:
          - CodeBuildServiceRole
          - Arn
        Artifacts:
          Type: CODEPIPELINE
        Environment:
          Type: LINUX_CONTAINER
          ComputeType: BUILD_GENERAL1_SMALL
          Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        Source:
          Type: CODEPIPELINE
        Cache:
          Type: NO_CACHE
  GitHubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName:
        Fn::Sub: ${AWS::StackName}-github
      ProviderType: GitHub
  Pipeline:
      Type: AWS::CodePipeline::Pipeline
      Properties:
        RoleArn:
          Fn::GetAtt:
          - CodePipelineServiceRole
          - Arn
        ArtifactStore:
          Type: S3
          Location:
            Ref: PipelineArtifactsBucket
        Stages:
        - Name: Source
          Actions:
          - Name: Source
            ActionTypeId:
              Category: Source
              Owner: AWS
              Version: 1
              Provider: CodeStarSourceConnection
            Configuration:
              ConnectionArn:
                Ref: GitHubConnection
              FullRepositoryId: tannerk2/family-reunion-website
              BranchName: main
            OutputArtifacts:
            - Name: SourceCode
            RunOrder: 1
        - Name: UpdateInfrastructure
          Actions:
          - Name: UpdateCloudFormation
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            Configuration:
              ActionMode: CREATE_UPDATE
              Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
              RoleArn: !GetAtt CloudFormationExecutionRole.Arn
              StackName: !Ref AWS::StackName
              TemplatePath: SourceCode::template.yaml
              ParameterOverrides: !Sub |
                {
                  "DomainName": "${DomainName}",
                  "AcmCertificateArn": "${AcmCertificateArn}"
                }
            InputArtifacts:
            - Name: SourceCode
            RunOrder: 1
        - Name: Deploy
          Actions:
          - Name: DeployWebsite
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName:
                Ref: CodeBuildProject
              EnvironmentVariables:
                Fn::Sub: '[{"name":"WEBSITE_BUCKET","value":"${DomainName}"},{"name":"CLOUDFRONT_ID","value":"${CloudFrontDistribution}"}]'
            InputArtifacts:
            - Name: SourceCode
            OutputArtifacts:
            - Name: BuildOutput
            RunOrder: 1
Outputs:
  WebsiteURL:
    Description: CloudFront Distribution Domain Name
    Value:
      Fn::Sub: https://${CloudFrontDistribution.DomainName}
  ApiEndpoint:
    Description: API Gateway Endpoint
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/rsvp